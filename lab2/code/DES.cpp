#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 定义 S 盒
int S_Box[8][4][16] = {
    {
        {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
        {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
        {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
        {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
    },
    {
        {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
        {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
        {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
        {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
    },
    {
        {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
        {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
        {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
        {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
    },
    {
        {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
        {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
        {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
        {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
    },
    {
        {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
        {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
        {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
        {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
    },
    {
        {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
        {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
        {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
        {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
    },
    {
        {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
        {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
        {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
        {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
    },
    {
        {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
        {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
        {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
        {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
    }
};

int IP_Table[64] = {    
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7,
    56, 48, 40, 32, 24, 16, 8, 0,
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6
}; 

int IP_1_Table[64] = {
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9,49,17,57,25,
    32,0,40,8,48,16,56,24
};

// 修正后的PC-1置换表（56位）
int PC_1[56] = {
    56, 48, 40, 32, 24, 16, 8,  
    0, 57, 49, 41, 33, 25, 17,  
    9, 1, 58, 50, 42, 34, 26,  
    18, 10, 2, 59, 51, 43, 35,  
    62, 54, 46, 38, 30, 22, 14,  
    6, 61, 53, 45, 37, 29, 21,  
    13, 5, 60, 52, 44, 36, 28,  
    20, 12, 4, 27, 19, 11, 3   
};

// 修正后的PC-2置换表（48位）
int PC_2[48] = {
    13, 16, 10, 23, 0, 4,  
    2, 27, 14, 5, 20, 9,  
    22, 18, 11, 3, 25, 7,  
    15, 6, 26, 19, 12, 1,  
    40, 51, 30, 36, 46, 54,  
    29, 39, 50, 44, 32, 47,  
    43, 48, 38, 55, 33, 52,  
    45, 41, 49, 35, 28, 31  
};

int E_Table[48] = {
    31,0,1,2,3,4,
    3,4,5,6,7,8,
    7,8,9,10,11,12,
    11,12,13,14,15,16,
    15,16,17,18,19,20,
    19,20,21,22,23,24,
    23,24,25,26,27,28,
    27,28,29,30,31,0
};

int P_Table[32] = {
    15,6,19,20,28,11,27,16,
    0,14,22,25,4,17,30,9,
    1,7,23,13,31,26,2,8,
    18,12,29,5,21,10,3,24
};

int move_times[16] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

int K[16][48];
int L[17][32], R[17][32];

void Replacement(int *in, int *table, int *out, int num) {
    for(int i = 0; i < num; i++) 
        out[i] = in[table[i]];
}

void lif_move(int *in, int *out, int n) {
    memcpy(out, in + n, (28 - n) * sizeof(int));
    memcpy(out + (28 - n), in, n * sizeof(int));
}

void SubKey(int K0[64]) {
    int K1[56], K2[56];
    int C[17][28], D[17][28];

    Replacement(K0, PC_1, K1, 56);
    
    memcpy(C[0], K1, 28 * sizeof(int));
    memcpy(D[0], K1+28, 28 * sizeof(int));
    
    for(int i=0; i<16; i++) {
        lif_move(C[i], C[i+1], move_times[i]);
        lif_move(D[i], D[i+1], move_times[i]);
        
        memcpy(K2, C[i+1], 28 * sizeof(int));
        memcpy(K2+28, D[i+1], 28 * sizeof(int));
        Replacement(K2, PC_2, K[i], 48);
    }
}

void S_compress(int arry[], int shc[]) {
    for(int i=0; i<8; i++) {
        int h = arry[i*6] *2 + arry[i*6+5];
        int l = arry[i*6+1]<<3 | arry[i*6+2]<<2 | arry[i*6+3]<<1 | arry[i*6+4];
        int val = S_Box[i][h][l];
        
        shc[i*4+3] = val & 1; val >>=1;
        shc[i*4+2] = val & 1; val >>=1;
        shc[i*4+1] = val & 1; val >>=1;
        shc[i*4] = val & 1;
    }
}

void E(int in[], int out[]) {
    for(int i=0; i<48; i++) 
        out[i] = in[E_Table[i]];
}

void F_Function(int in[], int out[], int keyIndex) {
    int expanded[48], s_out[32];
    E(in, expanded);
    
    for(int i=0; i<48; i++)
        expanded[i] ^= K[keyIndex][i];
        
    S_compress(expanded, s_out);
    Replacement(s_out, P_Table, out, 32);
}

void Encryption(int m0[64], int c1[64]) {
    int m1[64], c0[64];
    Replacement(m0, IP_Table, m1, 64);
    
    memcpy(L[0], m1, 32 * sizeof(int));
    memcpy(R[0], m1+32, 32 * sizeof(int));
    
    for(int k=1; k<=16; k++) {
        int f_result[32];
        F_Function(R[k-1], f_result, k-1);
        
        for(int i=0; i<32; i++) {
            L[k][i] = R[k-1][i];
            R[k][i] = L[k-1][i] ^ f_result[i];
        }
    }
    
    memcpy(c0, R[16], 32 * sizeof(int));
    memcpy(c0+32, L[16], 32 * sizeof(int));
    Replacement(c0, IP_1_Table, c1, 64);
}

void Decryption(int m0[64], int c1[64]) {
    int m1[64], c0[64];
    Replacement(m0, IP_Table, m1, 64);
    
    memcpy(L[0], m1, 32 * sizeof(int));
    memcpy(R[0], m1+32, 32 * sizeof(int));
    
    for(int k=1; k<=16; k++) {
        int f_result[32];
        F_Function(R[k-1], f_result, 16 - k); // 反向使用密钥
        
        for(int i=0; i<32; i++) {
            L[k][i] = R[k-1][i];
            R[k][i] = L[k-1][i] ^ f_result[i];
        }
    }
    
    memcpy(c0, R[16], 32 * sizeof(int));
    memcpy(c0+32, L[16], 32 * sizeof(int));
    Replacement(c0, IP_1_Table, c1, 64);
}

void printHex(int *bits, int len) {
    for(int i=0; i<len; i+=8) {
        int byte = 0;
        for(int j=0; j<8; j++) 
            byte = (byte << 1) | bits[i+j];
        printf("%02X ", byte);
    }
    printf("\n");
}

int main() {
    int key[64] = {0};
    int plain[64] = {0};
    int cipher[64] = {0};
    int decrypted[64] = {0};
    
    // 设置密钥（8个0x30）
    for(int i=0; i<8; i++) 
        for(int j=0; j<8; j++) 
            key[i*8 + j] = (0x30 >> (7-j)) & 1;
    
    // 设置明文（8个0x31）
    for(int i=0; i<8; i++) 
        for(int j=0; j<8; j++) 
            plain[i*8 + j] = (0x31 >> (7-j)) & 1;
    
    SubKey(key);
    
    printf("明文：");
    printHex(plain, 64);
    
    Encryption(plain, cipher);
    printf("\n加密结果：");
    printHex(cipher, 64);
    
    Decryption(cipher, decrypted);
    printf("\n解密结果：");
    printHex(decrypted, 64);
    
    return 0;
}